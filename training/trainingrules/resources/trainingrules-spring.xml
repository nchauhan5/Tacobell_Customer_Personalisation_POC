<?xml version="1.0" encoding="UTF-8"?>
<!-- [y] hybris Platform Copyright (c) 2017 SAP SE or an SAP affiliate company. All rights reserved. This software is the confidential 
	and proprietary information of SAP ("Confidential Information"). You shall not disclose such Confidential Information and shall use 
	it only in accordance with the terms of the license agreement you entered into with SAP. -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- The hybris platform provides one single Spring application context for beans located at the jalo layer. Each extension can add 
		beans to this context by specifying them at this configuration file. You can use and/or redefine beans defined at configuration files 
		of other extensions as well as adding new one. If you want to locate this file at a different location or want to use several files 
		for better, structuring, please use the '<yourextension>.application-context' property at your project.properties file. There you can 
		specify a comma separated list of files where first is tried to find a file per classpath and then per file system. If you want to 
		configure beans for your web module please have a look at your web/webroot/WEB-INF/<extname>-web-spring.xml. -->

	<!-- Example how to override a manager -->
	<!-- <bean id="core.productManager" class="org.training.jalo.TrainingrulesProductManager" init-method="init" destroy-method="destroy" 
		/> -->


	<!-- Example how to configure the class to use for jalo session creation -->
	<!-- <bean id="jalosession" class="de.hybris.platform.jalo.JaloSessionFactory"> <property name="targetClassName" value="org.training.jalo.TrainingrulesJaloSession"/> 
		</bean> -->


	<!-- Example how to override an item -->
	<!-- <bean id="de.hybris.platform.jalo.product.Product" class="org.training.jalo.TrainingrulesProduct" scope="prototype" /> -->

	<!-- Example how to register and use an AOP aspect Also see http://static.springframework.org/spring/docs/2.5.x/reference/aop.html -->

	<!-- <bean id="trainingrulesProfBean" class="org.training.aop.TrainingrulesProfilingAspect"/> <aop:config proxy-target-class="true"> 
		<aop:aspect id="trainingrulesProfAspect" ref="trainingrulesProfBean" > <aop:pointcut id="profiledMethods" expression="execution(* getModificationTime(..))" 
		/> <aop:around pointcut-ref="profiledMethods" method="profile" /> </aop:aspect> </aop:config> -->


	<!-- some other examples of a pointcut that matches everything: <aop:pointcut id="profiledMethods" expression="bean(de.hybris.platform.jalo.user.Customer) 
		&amp;&amp; !execution(* getPK(..))" /> <aop:pointcut id="profiledMethods" expression="execution(* *(..))" /> -->

	<bean id="trainingrulesSystemSetup" class="org.training.setup.TrainingrulesSystemSetup">
		<!-- constructor arg injection example -->
		<constructor-arg ref="trainingrulesService" />
	</bean>

	<bean id="trainingrulesService" class="org.training.service.impl.DefaultTrainingrulesService">
		<!-- setter injection example -->
		<property name="modelService" ref="modelService" />
		<property name="mediaService" ref="mediaService" />
		<property name="flexibleSearchService" ref="flexibleSearchService" />
	</bean>
	<!-- Translators -->
	<bean id="assignUserToSegmentRuleTranslator" class="org.training.rules.conditions.translators.AssignUserToSegmentRuleTranslator" />
	<bean id="assignUserToSegmentRuleAddProductToCartTranslator" class="org.training.rules.conditions.translators.AssignUserToSegmentRuleAddProductToCartTranslator" />
	<bean id="assignUserToSegmentRuleBrowseCategoriesTranslator" class="org.training.rules.conditions.translators.AssignUserToSegmentRuleBrowseCategoriesTranslator" />
	<bean id="assignUserToSegmentRuleOrderValueGreaterThanTranslator" class="org.training.rules.conditions.translators.AssignUserToSegmentRuleOrderValueGreaterThanTranslator" />

	<!-- Actions -->
	<bean id="assignUserToSegmentAction" class="org.training.rules.actions.AssignUserToSegmentAction" />

	<alias name="defaultSegmentRuleEngineService" alias="segmentRuleEngineService" />
	<bean id="defaultSegmentRuleEngineService" parent="abstractBusinessService" class="org.training.rules.services.impl.DefaultSegmentRuleEngineService">
		<property name="commerceRuleEngineService" ref="commerceRuleEngineService" />
		<property name="ruleEngineContextDao" ref="ruleEngineContextDao" />
		<property name="defaultRuleEngineContextName" value="userSegmentRule-production-context" />
		<property name="factContextFactory" ref="defaultCSMFactContextFactory" />
	</bean>

	<bean id="defaultCSMFactContextFactory" parent="defaultFactContextFactory">
		<property name="raoProviders">
			<map merge="true">
				<entry key="USER_SEGMENT" value-ref="SegmentRuleRAOProviders" />
			</map>
		</property>
	</bean>
	<util:map id="SegmentRuleRAOProviders">
		<entry key="de.hybris.platform.core.model.user.CustomerModel">
			<util:list>
				<ref bean="segmentRuleCustomerRaoProvider" />
			</util:list>
		</entry>
		<entry key="de.hybris.platform.core.model.order.CartModel">
			<util:list>
				<ref bean="cartRAOProvider" />
			</util:list>
		</entry>
		<entry key="de.hybris.platform.category.model.CategoryModel">
			<util:list>
				<ref bean="segmentRuleCategoryRaoProvider" />
			</util:list>
		</entry>
	</util:map>

	<alias name="defaultSegmentRuleCustomerRaoProvider" alias="segmentRuleCustomerRaoProvider" />
	<bean id="defaultSegmentRuleCustomerRaoProvider" class="org.training.rules.rao.provider.DefaultSegmentRuleCustomerRaoProvider">
		<property name="customerRaoConverter" ref="customerRaoConverter"></property>
		<property name="ruleEngineCalculationService" ref="ruleEngineCalculationService" />
		<property name="factExtractorList" ref="customerRAOProviderExtractors" />
	</bean>

	<alias alias="customerRAOProviderExtractors" name="defaultCustomerRAOProviderExtractors" />
	<util:list id="defaultCustomerRAOProviderExtractors" />

	<alias name="defaultSegmentRuleCategoryRaoProvider" alias="segmentRuleCategoryRaoProvider" />
	<bean id="defaultSegmentRuleCategoryRaoProvider" class="org.training.rules.rao.provider.DefaultSegmentRuleCategoryRAOProvider">
		<property name="categoryRaoConverter" ref="categoryRaoConverter"></property>
		<property name="ruleEngineCalculationService" ref="ruleEngineCalculationService" />
		<property name="factExtractorList" ref="categoryRaoProviderExtractors" />
	</bean>

	<alias alias="categoryRaoProviderExtractors" name="defaultCategoryRAOProviderExtractors" />
	<util:list id="defaultCategoryRAOProviderExtractors" />

	<alias name="defaultCustomerRaoConverter" alias="customerRaoConverter" />
	<bean id="defaultCustomerRaoConverter" parent="abstractPopulatingConverter">
		<property name="targetClass" value="org.training.data.CustomerRAO" />
		<property name="populators">
			<list>
				<ref bean="customerRaoPopulator" />
			</list>
		</property>
	</bean>

	<alias name="defaultCustomerRaoPopulator" alias="customerRaoPopulator" />
	<bean id="defaultCustomerRaoPopulator" class="org.training.rules.converters.populators.CutomerRaoPopulator">
		<property name="userConverter" ref="userRaoConverter" />
	</bean>

	<bean id="segmentRuleParameterValueMapper" class="org.training.rules.strategies.impl.mapper.SegmentRuleParameterValueMapper">
		<!-- <property name="cxSegmentService" ref="cxSegmentService" /> -->
	</bean>

	<bean id="segmentRuleParameterValueMapperDefinition" class="de.hybris.platform.ruleengineservices.rule.strategies.impl.RuleParameterValueMapperDefinition">
		<property name="mapper" ref="segmentRuleParameterValueMapper" />
		<property name="type" value="ItemType(CxSegment)" />
	</bean>

	<bean id="removeUserFromSegmentService" class="org.training.rules.services.impl.DefaultUserToSegmentService" />

	<bean id="customerAgeDynamicHandler" class="org.training.rules.dynamic.attribute.handlers.CustomerAgeHandler" />

	<bean id="removeUserFromSegmentsJob" class="org.training.rules.cronjobs.RemoveUserFromSegmentsJob" autowire="byName" />

</beans>
